---
title: Creating a `python` module
keep-md: true
---


## What is a `python` module?

You already know it: this is a set of `python` functions and statements, and this is what you import at the beginning of your `python` functions.

### A module could be a single file

Indeed, a module can simply be a single file:

```{python}
import fibo
```

This does not enter the names of the functions defined in `fibo` directly in the current symbol table though; it only enters the module name `fibo` there.
Using the module name you can access the functions:

```{python}
fibo.fib_print(1000)
```
```{python}
fibo.fib_list(100)
```

When importing a module, several methods are (automatically) defined.
Their names are usually prefixed and suffixed by the symbol `__`, e.g.,

```{python}
fibo.__name__
```
```{python}
fibo.__file__
```
### ... or a module could be a directory

You can also import a full directory (containing many `python` files stored in a sub-folder). `python` looks for a folder located in `sys.path` list.
You have already imported the `numpy` module, for numerical analysis with `python`:

```{python}
import numpy as np
print(np.array([0, 1, 2, 3]).reshape(2, 2))
print(np.array([0, 1, 2, 3]).mean())
```

In fact, you have imported the following folder:

```{python}
np.__path__
```
Depending on your installation you might obtain
`['/usr/lib/python3.9/site-packages/numpy']`
or
`['/home/username/anaconda3/lib/python3.7/site-packages/numpy']`
if you installed with Anaconda.

More precisely you will get either

```python
>>> np.__file__
'/usr/lib/python3.9/site-packages/numpy/__init__.py'
```

or

```python
>>> np.__file__
'/home/username/anaconda3/lib/python3.7/site-packages/numpy/__init__.py'
```

Any (sub-)directory of your `python` module should contain an `__init__.py` file!

::: {.callout-note}
## Useful tips

- The `__init__.py` file can contain a list of functions to be loaded when the module is imported.
It allows to expose functions to users in a concise way.

- You can also import modules with relative paths, using `.`, `..`, `...`, etc.
:::

*Reference:* [Absolute vs Relative Imports in Python](https://realpython.com/absolute-vs-relative-python-imports/) by Mbithe Nzomo.

### The `dir()` function

The built-in function `dir()` is used to find out which names a module defines.
It returns a sorted list of strings:

```{python}
import fibo, numpy
dir(fibo)
```

```{python}
#| eval: false
dir(numpy)
```

::: {.scroll-container style="overflow-y: scroll; height: 400px;"}
```{python}
#| echo: false
dir(numpy)
```
:::
<!-- The `0x7fe0a25e81e0` hexadecimal number is the `id` of the object: 
```{python}
hex(id(numpy.__dir__))
```
This is an integer (or long integer) that is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value. (Implementation note: this is the address of the object.). See <https://docs.python.org/3/library/functions.html#id>
-->
<br>
To list every element in your symbol table simply call `dir()`.

*Reference:* [Python doc of the `dir` function](https://docs.python.org/3/tutorial/modules.html#the-dir-function)

### Namespaces

A namespace is a set of names (functions, variables, etc.).
Different namespaces can co-exist at a given time but are completely isolated. In this way, you can control which function you are using.

A namespace containing all the built-in names is created when we start the `python` interpreter and exists as long we don't exit.

```{python}
#| error: true
cos(3)
```
You need to import a package for mathematical functions:
```{python}
import math, numpy as np
print(math.cos(3), np.cos(3))
```

*Reference:* [Python Namespace and Scope tutorial](https://www.programiz.com/python-programming/namespace)

### The Module Search Path

When a module named `spam` is imported, the interpreter first searches for a built-in module with that name.
If not found, it then searches for a file named `spam.py` in a list of directories given by the variable `sys.path`. The variable `sys.path` is initialized from these locations:

- The directory containing the input script (or the current directory when no file is specified).

- The environment variable `PYTHONPATH` (a list of directory names, with the same syntax as the shell variable `PATH`).

*Reference:* [Python documentation, The Module Search Path](https://docs.python.org/3/tutorial/modules.html#the-module-search-path)

### Checking if a module exists

Find the loader for a module, optionally within the specified path.

```{python}
import importlib
spam_spec = importlib.util.find_spec("spam")
found = spam_spec is not None
print(found)
```
Now,

```{python}
import numpy
numpy_spec = importlib.util.find_spec("numpy")
print(numpy_spec)
```
should return more information and where the loader is.


*References:*

- [Python doc on find_loader](https://docs.python.org/3/library/importlib.html#importlib.find_loader)
- [How to check if a Python module exists without importing it](https://stackoverflow.com/questions/14050281/how-to-check-if-a-python-module-exists-without-importing-it) on Stackoverflow

### Lazy import

A module can contain executable statements as well as function definitions.
These statements are intended to initialize the module.
They are executed only the **first time** the module name is encountered in an `import` statement.

To force a module to be reloaded, you can use `importlib.reload()`.

**Remark**: when using `ipython` (interactive `python`, an ancestor of the `jupyter notebook`), one can use the "magic" command
`%autoreload 2`

*References:*
- [Python doc on reload](https://docs.python.org/3/library/importlib.html#importlib.reload)
- [IPython autoreload](https://ipython.readthedocs.io/en/stable/config/extensions/autoreload.html?highlight=autoreload)

### "Compiled" `python` files

To speed up loading modules, `python` caches the compiled version of each module in the  `__pycache__` directory under the name `module.version.pyc`, where the version encodes the format of the compiled file; it generally contains the `python` version number.

For example, in `CPython` release 3.3 the compiled version of spam.py would be cached as `__pycache__/spam.cpython-33.pyc`.
This naming convention allows compiled modules from different releases and different versions of `python` to coexist.


::: {.callout-note}
## Useful git tip

You should add `__pycache__` entry in your `.gitignore` file to avoid adding a compiled `python` file to your project.
:::

## The `python` Package Index (Pypi) repository

The `python` Package Index, abbreviated as PyPI, is the official third-party software repository for `python`.
PyPI primarily hosts `python` packages in the form of archives called `sdists` (source distributions) or pre-compiled "wheels".


::: {.callout-important appearance='default' icon="false"}
## EXERCISE: pypi

1. Go to <https://test.pypi.org/> and describe the aim of this repository.

:::

### Pip

`pip` is a *de facto* standard package-management system used to install and manage software packages from PyPi.
```default
$ pip install some-package-name
$ pip uninstall some-package-name
$ pip search some-package-name
```

::: {.callout-important appearance='default' icon="false"}
## EXERCISE: 

  1. Install the modules `pooch`, `setuptools`, `pandas`, `pygal` and `pygal_maps_fr`. Beware, you should use the option `--user` to force the installation in your home directory.
  2. List all the package in your venv using pip.
:::

It is possible to install a **local** module with pip

```default
$ pip install /path/to/my/local/module
```

where `/path/to/my/local/module` is the path to the module.
But if some changes occur in the `/path/to/my/local/module` folder, the module will not be reloaded.
This might be annoying during the development stage.
To force `python` to reload the module at each change call, consider the `-e` option:

```default
$ pip install -e /path/to/my/local/module
```

## Creating a `python` module

We are going to create a simple package. The structure is always similar, and an example can be found for instance [here](https://github.com/Kozea/pygal_maps_fr).



*Reference:* [How To Package Your Python Code](https://python-packaging.readthedocs.io/en/latest/)

### Picking a name

`python` module/package names should generally follow the following constraints:

- All lowercase (&#127467;&#127479;: *en minuscule*)
- Unique on PyPI, even if you do not want to make your package publicly available (you might want to specify it privately as a dependency later)
- Underscore-separated or no word separators at all, and do not use hyphens (*i.e.*, use `_` not `-`).

We are going to create a module called `biketrauma` to visualize the `bicycle_db` (Source: [here](https://github.com/josephsalmon/HAX712X/raw/main/Data/accidents-velos_2022.csv.xz), adapted for the original version from [there](https://koumoul.com/s/data-fair/api/v1/datasets/accidents-velos/raw)) used in the some of these lectures.


### Module structure

The initial directory structure for `biketrauma` should look like this:

```default
packaging_tutorial/
    ├── biketrauma/
    │     ├── __init__.py
    │     └── data/
    ├── setup.py
    └── .gitignore
```

The top-level directory is the root of our Version Control System (e.g. git) repository `packaging_tutorial`. The sub-directory, `biketrauma`, is the actual `python` module.


::: {.callout-important appearance='default' icon="false"}
## EXERCISE: packaging

 We are going to create a new `python` module that can be used to visualize the bike dataset.

  1. Create a new folder `~/packaging_tutorial/` and initialize a git in it.
  2. Create a `.gitignore` file to ignore `__pycache__`, `.vscode` directories and files containing the string `egg-info` or `dist` in their name as well.
  3. Push your work into a new repository on your github.
  5. Create a sub-folder `~/packaging_tutorial/biketrauma`. This is where our `python` module will be stored.
  6. Create a `~/packaging_tutorial/biketrauma/__init__.py` file where a string `__version__` defined at `0.0.1`.
  4. Create an empty sub-folder `~/packaging_tutorial/biketrauma/data` locally on your computer/session.
  How to add it to git?  (*Hint: `.gitkeep`*)
  7. Create **an empty** `~/packaging_tutorial/setup.py` file.
  8. Commit and push into your repository.

*Reference:* [Single-sourcing the package version](https://packaging.python.org/guides/single-sourcing-package-version/).
:::

### Sub-modules

The final directory structure of our module will look like:

```default
packaging_tutorial/
    ├── biketrauma/
    │     ├── __init__.py
    │     ├── io/
    │     │     ├─ __init__.py
    │     │     └─ Load_db.py
    │     ├── preprocess/
    │     │     ├─ __init__.py
    │     │     └─ get_accident.py
    │     └── vis/
    │     │     ├─ __init__.py
    │     │     └─ plot_location.py
    │     └── data/
    │     │     └─ .gitkeep
    ├── setup.py
    ├── script.py
    └── .gitignore
```

::: {.callout-important appearance='default' icon="false"}
## EXERCISE: modules

See the git repo of the course: the subfolder [`Courses/Python-modules/modules_files`](https://github.com/josephsalmon/HAX712X/tree/main/Courses/Python-modules/modules_files): contains some files you should include into your package tree:

  1. Copy the `script.py` into the project root folder.
  2. Add some sub-folders to `biketrauma` directory called `io` (for input/output), `preprocess`, `vis` (for visualization). Add an empty `__init__.py` file into the module and sub-module folders.
  3. Populate the `preprocess` sub-module with the `get_accident.py` file.
  4. Populate the `vis` sub-module with the `plot_location.py` file.
  5. Populate the `io` sub-module with the file `Load_db.py` (it downloads the bike dataset). At the loading step of the `io` sub-module, it should create the following variables ([Hint]{.underline}: this is done in the `__init__.py` file)

      ```python
      url_db = "https://github.com/josephsalmon/HAX712X/raw/main/Data/accidents-velos_2022.csv.xz"
      path_target = os.path.join(
          os.path.dirname(os.path.realpath(__file__)), "..", "data", "bicycle_db.csv.xz"
      )
      ```

  6. Commit your changes.
:::



### Fix the import

In order to load the functions in the `io`, `preprocess` and `vis` sub-modules, you can add the following lines to the `~/packaging_tutorial/biketrauma/__init__.py`:


```python
from .io.Load_db import Load_db
from .vis.plot_location import plot_location
from .preprocess.get_accident import get_accident
```
::: {.callout-important appearance='default' icon="false"}
## EXERCISE:

1. Be sure to have the following packages installed ([Hint]{.underline}: this list could be saved in a `requirements.txt` file in the project root folder.):

    ```default
    tqdm
    pygal_maps_fr
    pooch
    pandas
    numpy
    pygal
    setuptools
    lxml
    ```

2. Check that your module does work by launching the script.

    ```default
    $ cd ~/packaging_tutorial
    $ python script.py
    ```
    You can then open the file created file `biketrauma_map.svg` in a navigator:
    ```{=html}
    <center>
     <iframe width= 100% height=500 src="biketrauma_map.svg"></iframe>
    </center>
    ```
    <!-- ![Biketrauma map](biketrauma_map.svg) -->

  3. Commit and push your changes.
:::

### Package the module with `setuptools`

The main setup configuration file, `setup.py`, should contain a single call to `setuptools.setup()`, like so:

```python
from setuptools import setup
from biketrauma import __version__ as current_version

setup(
  name='biketrauma',
  version=current_version,
  description='Visualization of a bicycle accident db',
  url='http://github.com/xxxxxxxxxxx.git',
  author='xxxxxxxxxxx',
  author_email='xxxxxxxxxx@xxxxxxxxxxxxx.xxx',
  license='MIT',
  packages=['biketrauma','biketrauma.io', 'biketrauma.preprocess', 'biketrauma.vis'],
  zip_safe=False
)
```

To create a `sdist` package (a source distribution):

```default
$ cd ~/packaging_tutorial/
$ python setup.py sdist
```

This will create `dist/biketrauma-0.0.1.tar.gz` inside the top-level directory. You can now install it with

```default
$ pip install ~/packaging_tutorial/dist/biketrauma-0.0.1.tar.gz
```

*References:*

- [Building and Distributing Packages with Setuptools](https://setuptools.readthedocs.io/en/latest/setuptools.html)
- [Packaging Python Projects](https://packaging.python.org/tutorials/packaging-projects/)

### Add requirement file

To get a list of the installed packages in your current Venv, you can use the following command:

```default
$ pip freeze > requirements.txt
```
Unfortunately, it may generate a huge collection of package dependencies. To get a sparser list, you can use `pipreqs`.


::: {.callout-important appearance='default' icon="false"}
## EXERCISE: requirements

Create a minimal `requirements.txt` file with `pipreqs`. Add it to the `biketrauma` module.
:::

### Upload on PyPI

`twine` is a utility for publishing `python` packages on PyPI. We are going to use the test repository <https://test.pypi.org/>.


::: {.callout-important appearance='default' icon="false"}
## EXERCISE:

1. Create an account on the PyPI test repository.

   This is quite easy to upload a `python` module on PyPI:

1. Create some distributions in the normal way:

    ```default
    $ python setup.py sdist bdist_wheel
    ```

2. Upload with twine to Test PyPI and verify things look right. Twine will automatically prompt for your username and password:

    ```default
    $ twine upload --repository-url https://test.pypi.org/legacy/ dist/*
    username: ...
    password: ...
    ```

3. Upload to PyPI:

    ```default
    $ twine upload dist/*
    ```
:::

::: {.callout-note}
## About the data folder

We have included the data folder in the sub-module tree which is not a good practice: permission may not be granted in the destination dir of the module... A better idea could be to create a `data` folder in a cache or temp directory. 
:::

## References

- [Python Packaging User Guide](https://packaging.python.org/tutorials/distributing-packages/https://packaging.python.org/tutorials/distributing-packages/)
- [Twine, uploads of source](https://pypi.org/project/twine/), provides additional documentation on using `twine` to upload packages to PyPI.
