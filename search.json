[
  {
    "objectID": "Courses/Visualization/tp.html",
    "href": "Courses/Visualization/tp.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Data visualization is one of the main steps on the way to understanding a dataset. General information on data visualization (beyond Python) can be found in the following list:\n\nA visualization guide from data.europa.eu: The official portal for European data\nThe Python Graph Gallery\nData stories can help provide new ideas for your own work: Maarten Lambrechts’s website\nHow to choose your chart by Andrew V. Abela:\n\n.\nA major difference in the visualization solutions relies on the possibility of performing interactive inspection; otherwise, the solution is said static.\nInteractive tools for data visualization are emerging in Python with plotly, altair, Bokeh, etc. An extensive study by Aarron Geller provides the pros and cons of each method.",
    "crumbs": [
      "Scientific Python",
      "Data Visualization"
    ]
  },
  {
    "objectID": "Courses/Visualization/tp.html#introduction",
    "href": "Courses/Visualization/tp.html#introduction",
    "title": "Data Visualization",
    "section": "",
    "text": "Data visualization is one of the main steps on the way to understanding a dataset. General information on data visualization (beyond Python) can be found in the following list:\n\nA visualization guide from data.europa.eu: The official portal for European data\nThe Python Graph Gallery\nData stories can help provide new ideas for your own work: Maarten Lambrechts’s website\nHow to choose your chart by Andrew V. Abela:\n\n.\nA major difference in the visualization solutions relies on the possibility of performing interactive inspection; otherwise, the solution is said static.\nInteractive tools for data visualization are emerging in Python with plotly, altair, Bokeh, etc. An extensive study by Aarron Geller provides the pros and cons of each method.",
    "crumbs": [
      "Scientific Python",
      "Data Visualization"
    ]
  },
  {
    "objectID": "Courses/Visualization/tp.html#python",
    "href": "Courses/Visualization/tp.html#python",
    "title": "Data Visualization",
    "section": "Python",
    "text": "Python\nThe list is long (and growing) of Python packages for data visualization. We provide some examples in the pandas section of the website, and also in the Scipy course.\n\nGeneric tools\n\nmatplotlib: Visualization with Python\nSource: https://matplotlib.org/.\nThis is the standard library for plots in Python. The documentation is well written and matplotlib should be the default choice for creating static documents (e.g., .pdf or .doc files).\nUsual loading command:\n\nimport matplotlib.pyplot as plt\n\nExample:\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nt = np.linspace(0, 2 * np.pi, 1024)\nft1 = np.sin(2 * np.pi * t)\nft2 = np.cos(2 * np.pi * t)\nfig, ax = plt.subplots()\nax.plot(t, ft1, label='sin')\nax.plot(t, ft2, label='cos')\nax.legend(loc='lower right');\n\n\n\n\n\n\nseaborn: statistical data visualization\nSource: https://seaborn.pydata.org/.\nseaborn is built over matplotlib and is specifically tailored for data visualization (maptlotlib is a more flexible and general tool). Default settings are usually nicer than one from maptlotlib, especially for standard tools (histograms, KDE, swarmplots, etc.).\nUsual loading command:\n\nimport seaborn as sns\n\nExample:\n\nimport seaborn as sns\nimport pandas as pd\ndf = pd.DataFrame(dict(sin=ft1, cos=ft2))\nsns.set_style(\"whitegrid\")\nax = sns.lineplot(data=df)\nsns.move_legend(ax, \"lower right\")\nsns.despine()\n\n\n\n\n\n\nplotly: a graphing library for Python\nSource: https://plotly.com/python/.\nThe force of plotly is that it is interactive and can handle R software or julia on top of Python (it relies on Java Script under the hood).\nUsual loading command:\n\nimport plotly\n\nAlternatively, you can also use plotly.express to use predefined figures:\n\nimport plotly.express as px\n\n\nimport plotly.express as px\nfig = px.line(df)\nfig.show()\n\n                                                \n\n\n\n\n\n\n\n\nNote\n\n\n\nIn plotly the figure is interactive. If you click on the legend on the right, you can select a curve to activate/deactivate.\n\n\nBut now you can also create a slider to change a parameter, for instance showing the functions\n\n\\begin{align*}\nf_w: t \\to \\sin(2 \\cdot \\pi \\cdot w \\cdot t)\\\\\ng_w: t \\to \\sin(2 \\cdot \\pi \\cdot w \\cdot t)\n\\end{align*}\n for w \\in [-5, 5]\n\n# inspiration from:\n# https://community.plotly.com/t/multiple-traces-with-a-single-slider-in-plotly/16356\nimport plotly.graph_objects as go\nimport numpy as np\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\nnum_steps = 101\nslider_range = np.linspace(-5, 5 , num=num_steps)\ntrace_list1 = []\ntrace_list2 = []\n\nfor i, w  in enumerate(slider_range):\n    trace_list1.append(go.Scatter(y=np.sin(2*np.pi*t*w), visible=False, line={'color': 'red'}, name=f\"sin(w * 2 *pi)\"))\n    trace_list2.append(go.Scatter(y=np.cos(2*np.pi*t *w), visible=False, line={'color': 'blue'}, name=f\"cos(w * 2 *pi)\"))\n\nfig = go.Figure(data=trace_list1+trace_list2)\n\n# Initialize display:\nfig.data[51].visible = True\nfig.data[51 + num_steps].visible = True\n\n\nsteps = []\nfor i in range(num_steps):\n    # Hide all traces\n    step = dict(\n        method = 'restyle',\n        args = ['visible', [False] * len(fig.data)],\n        label=f\"{w:.2f}\"\n    )\n    # Enable the two traces we want to see\n    step['args'][1][i] = True\n    step['args'][1][i+num_steps] = True\n\n    # Add step to steps list\n    steps.append(step)\n\nsliders = [dict(\n    active = 50,\n    currentvalue={\"prefix\": \"w = \"},\n    steps = steps,\n)]\n\nfig.layout.sliders = sliders\n\niplot(fig, show_link=False)\n\n                                                \n\n\n\n\n\nInteractive tools\n\nShiny: interactive web applications\nSource: https://shiny.posit.co/py/.\nShiny helps you to customize the layout and style of your application and dynamically respond to events, such as a button press, or dropdown selection. It was born and raised in R, but is now adapted to Python. It can also be interfaced easily with Quarto to render the app on your website, using a {shinylive-python} cell; see an example at https://quarto-ext.github.io/shinylive/.\nThe app created is readable, yet the price to pay is the fluidity of the rendering.\n#| components: [editor, viewer]\n#| folded: true\n#| layout: vertical\n#| standalone: true\n#| viewerHeight: 630\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import ui, render, App\n\n# Create some random data\nt = np.linspace(0, 2 * np.pi, 1024)\nnum_steps = 101\nslider_range = np.linspace(-5, 5 , num=num_steps)\n\n\napp_ui = ui.page_fixed(\n    ui.h2(\"Playing with sliders\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"w\", \"Frequency\", -5, 5, value=1, step=slider_range[-1]-slider_range[-2]),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot\")\n        )\n    )\n)\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def plot():\n        fig, ax = plt.subplots()\n        ax.plot(t, np.sin(2*np.pi *input.w() * t), label='sin')\n        ax.plot(t, np.cos(2*np.pi *input.w() * t), label='cos')\n        ax.legend(loc='lower right');\n        return fig\n\n\napp = App(app_ui, server)\n\n\n\nbokeh: interactive visualizations in the browsers\nSource: http://bokeh.org/.\nUsual loading command:\n\nimport bokeh\n\nAs of today (Oct. 2023), this is not supported in Quarto, so no example is given here. A server is needed (locally or remotely).\n\n\nvega-altair: declarative visualization in Python\nSource: https://altair-viz.github.io/.\nUsual loading command:\n\nimport altair as alt\n\nAs of today (Oct. 2023), this is not supported in Quarto, so no example is given here. A server is needed (locally or remotely).\n\nAn interesting tutorial: Altair introduction\n\n\n\npygal: python charting\nSource: https://www.pygal.org/.\nWe use it mostly for maps, and especially for the map of France with DOMs. For instance, see the course Creating a Python module, such a map is constructed:\n\n    \n\n\nimport pygal\n\nTo access the French map plugin you need the installation step that follows:\npip install pygal_maps_fr",
    "crumbs": [
      "Scientific Python",
      "Data Visualization"
    ]
  },
  {
    "objectID": "Courses/Visualization/tp.html#animation-display-with-python",
    "href": "Courses/Visualization/tp.html#animation-display-with-python",
    "title": "Data Visualization",
    "section": "Animation display with python",
    "text": "Animation display with python\n\nAnimation with matplotlib\nYou can use FuncAnimation to animate a sequence of images:\n\n%%capture\nfrom matplotlib.animation import FuncAnimation\nfrom IPython.display import HTML, display\nfig, ax = plt.subplots()\nxdata, ydata = [], []\n(ln,) = plt.plot([], [], \"ro\")\n\n\ndef init():\n    ax.set_xlim(0, 2 * np.pi)\n    ax.set_ylim(-1, 1)\n    return (ln,)\n\n\ndef update(frame):\n    xdata.append(frame)\n    ydata.append(np.sin(frame))\n    ln.set_data(xdata, ydata)\n    return (ln,)\n\nani = FuncAnimation(\n    fig,\n    update,\n    interval=50,\n    frames=np.linspace(0, 2 * np.pi, 100),\n    init_func=init,\n    blit=True,\n)\n\ndisplay(HTML(ani.to_jshtml()))\n\n\n\n\n\n\n\n\n\n\n  \n  \n    \n    \n      \n          \n      \n        \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n    \n    \n      \n      Once\n      \n      Loop\n      \n      Reflect\n    \n  \n\n\n\n\n\n\n\nAnother way of displaying video exists, using html5 video:\n\ndisplay(HTML(ani.to_html5_video()))\n\nReferences:\n\nMatplotlib Animations / JavaScript Widgets by Louis Tiao",
    "crumbs": [
      "Scientific Python",
      "Data Visualization"
    ]
  },
  {
    "objectID": "Courses/Visualization/tp.html#animation-with-plotly",
    "href": "Courses/Visualization/tp.html#animation-with-plotly",
    "title": "Data Visualization",
    "section": "Animation with plotly",
    "text": "Animation with plotly\nmatplotlib works fine for advanced tuning, but is harder for simple tasks. So just try plotly for basic animations:\n\nimport plotly.express as px\nfrom plotly.offline import plot\n\ndf = px.data.gapminder()\nfig = px.scatter(\n    df,\n    x=\"gdpPercap\",\n    y=\"lifeExp\",\n    animation_frame=\"year\",\n    animation_group=\"country\",\n    size=\"pop\",\n    color=\"continent\",\n    hover_name=\"country\",\n    log_x=True,\n    size_max=55,\n    range_x=[100, 100000],\n    range_y=[25, 90],\n)\nfig.show(\"notebook\")\n\n                                                \n\n\n\nSpatial visualization\n\nipyleaflet\n\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nMontpellier_gps = (43.610769, 3.876716)\nm = Map(\n  basemaps=basemaps.OpenStreetMap.Mapnik,\n  center=Montpellier_gps,\n  zoom=6\n)\nm.add_layer(Marker(location=Montpellier_gps))\nm\n\n\n\n\n\n\nfolium\n\nimport folium\n\nm = folium.Map(\n    location=Montpellier_gps,\n    control_scale=True,\n    zoom_start=6\n)\n\nfolium.Marker(\n    location=Montpellier_gps,\n    tooltip=\"Click me!\",\n    popup=\"Montpellier\",\n    icon=folium.Icon(icon=\"certificate\", color=\"orange\"),\n).add_to(m)\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nlonboard\nThis is a fast map visualization with Python for large datasets lonboard\n\n\n\n3D visualization\n\nvedo: scientific analysis and visualization of 3D objects\nSource: https://vedo.embl.es/\nThis is a Python module for scientific analysis of 3D objects and point clouds based on VTK (C++) and numpy.",
    "crumbs": [
      "Scientific Python",
      "Data Visualization"
    ]
  },
  {
    "objectID": "Courses/Visualization/tp.html#r-software",
    "href": "Courses/Visualization/tp.html#r-software",
    "title": "Data Visualization",
    "section": "R software",
    "text": "R software\nXXX TODO.",
    "crumbs": [
      "Scientific Python",
      "Data Visualization"
    ]
  },
  {
    "objectID": "Courses/Visualization/tp.html#java-script",
    "href": "Courses/Visualization/tp.html#java-script",
    "title": "Data Visualization",
    "section": "Java Script",
    "text": "Java Script\nXXX TODO. Out of the scope of this course, yet more powerful.\n\nD3JS\n\n\nObservable\nThis is of interest as Quarto can directly read such kinds of figures.\n\nviewof inputs = Inputs.form([\n      Inputs.range([-5, 5], {value: 0.5, step: 0.1, label: tex`\\text{frequency} ~\\omega`}),\n    ])\n\nplt = Plot.plot({\n      color: {\n      legend: true\n    },\n    x: {\n      label: \"x\",\n    //   axis: true\n    },\n    y: {\n    //   axis: true,\n      domain: [-1.2, 1.2]\n    },\n    marks: [\n      Plot.ruleY([0]),\n      Plot.ruleX([0]),\n      Plot.axisX({ y: 0 }),\n      Plot.axisY({ x: 0 }),\n      Plot.line(data, {x: \"x\", y: \"y\", stroke : \"type\", strokeWidth: 2})\n    ]\n  })\n\n\ndata = {\n  const x = d3.range(-10, 10, 0.01);\n  const sins = x.map(x =&gt; ({x: x, y: Math.sin(- x * mu), type: \"sin(w .)\"}));\n  const coss = x.map(x =&gt; ({x: x, y: Math.cos(- x * mu), type: \"cos(w .)\"}));\n  return sins.concat(coss)\n\n}\n\nmu = inputs[0]",
    "crumbs": [
      "Scientific Python",
      "Data Visualization"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html",
    "href": "Courses/TimeMemory/tp.html",
    "title": "Time & memory efficiency",
    "section": "",
    "text": "import time\nimport numpy as np\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#timecomputation-usage-of-timeit",
    "href": "Courses/TimeMemory/tp.html#timecomputation-usage-of-timeit",
    "title": "Time & memory efficiency",
    "section": "Time/computation: usage of %timeit",
    "text": "Time/computation: usage of %timeit\nReferences:\n\nBuilt-in magic commands\nautoreload\n\nmagic commands are IPython commands such as: %timeit, %matplotlib, %autoreload. They work only in interactive cases (Ipython, Notebook, Jupyter lab etc.).\n\nn = 1000\nval = 5.4\n\n\n%timeit a = np.empty(n); a.fill(val)\n# Alternative: uncomment below\n# get_ipython().run_line_magic('timeit', 'a = np.empty(n); a.fill(val)')\n\n722 ns ± 23.1 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('empty')\n%timeit a = np.empty(n); a[:] = val\n\nempty\n836 ns ± 45.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\nprint('full')\n\n%timeit a = np.full((n,), val)\n\n1.56 µs ± 107 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('ones')\n\nones\n\n\n\n%timeit a = np.ones(n) * val\n\n3.28 µs ± 277 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n\n\nprint('repeat')\n\nrepeat\n\n\n\n%timeit a = np.repeat(val, n)\n\n4.41 µs ± 272 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#alternatives",
    "href": "Courses/TimeMemory/tp.html#alternatives",
    "title": "Time & memory efficiency",
    "section": "Alternatives",
    "text": "Alternatives\nUse the time module thanks to import time\n\nimport time\nstart = time.time()\na = np.ones(n) * val\nend = time.time()\nprint(\"Time to execute the command: {0:.5f} s.\".format(end - start))\n\nTime to execute the command: 0.00010 s.",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#sparse-matrices-graphs-and-memory",
    "href": "Courses/TimeMemory/tp.html#sparse-matrices-graphs-and-memory",
    "title": "Time & memory efficiency",
    "section": "Sparse matrices, graphs and memory",
    "text": "Sparse matrices, graphs and memory\nSparse matrices are useful to handle potentially huge matrices, that have only a few non-zero coefficients:\n\nScipy Lectures: why sparse matrices\nSparse data structures in Python, by Artem Golubin\nIntroduction to Sparse Matrices in Python with SciPy, by cmdlinetips\n\nExamples:\n\nNatural language processing: We encode the presence of a word from a dictionary (let’s say the set of French words) and we put 0 / 1 in case of absence/presence of a word.\nOne-hot encoding, used to represent categorical data as sparse binary vectors.\nthe discretization of a physical system where very distant influences are set to zero (e.g. heat diffusion, fluid mechanics, electro/magnetism, etc.)\nGraphs: they are naturally represented by adjacency or incidence matrices (cf. below), and therefore beyond the graphs, maps!\n\n\nMost common formats\n\ncoo_matrix(arg1[, shape, dtype, copy]): A sparse matrix in COOrdinate format.\ncsc_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Column matrix\ncsr_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Row matrix\n\nReferences:\n\nScipy doc on sparse matrices\n\n\nfrom scipy import sparse\nfrom scipy.sparse import isspmatrix\n\nId = sparse.eye(3)\nprint(Id.toarray())\nprint(f'Q: Is the matrix Id is sparse?\\nA: {isspmatrix(Id)}')\n\nn1 = 29\nn2 = 29\nmat_rnd = sparse.rand(n1, n2, density=0.25, format=\"csr\",\n                      random_state=42)\nprint(mat_rnd.toarray())\nprint(f'Q: Is the matrix mat_rnd is sparse?\\nA: {isspmatrix(mat_rnd)}')\n\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\nQ: Is the matrix Id is sparse?\nA: True\n[[0.         0.68298206 0.         0.         0.         0.\n  0.14312799 0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.4878098  0.\n  0.         0.35599148 0.10221266 0.         0.56550835 0.7677795\n  0.42359686 0.2253328  0.         0.53648135 0.        ]\n [0.         0.5344235  0.         0.         0.         0.\n  0.         0.39148211 0.         0.         0.84444067 0.\n  0.         0.         0.         0.         0.09229059 0.50610396\n  0.         0.         0.10424697 0.         0.         0.\n  0.         0.         0.         0.         0.        ]\n [0.77857194 0.82086147 0.77124667 0.         0.90786613 0.\n  0.         0.         0.         0.         0.13311693 0.\n  0.99769262 0.         0.         0.         0.         0.00530001\n  0.         0.         0.         0.         0.92404176 0.00259502\n  0.50228835 0.         0.08786811 0.33034848 0.        ]\n [0.         0.         0.         0.         0.         0.01220307\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.5938831\n  0.         0.         0.         0.         0.        ]\n [0.         0.7228961  0.         0.         0.14773909 0.\n  0.         0.         0.         0.         0.05565349 0.\n  0.32158276 0.         0.         0.20454459 0.57748627 0.40851829\n  0.         0.         0.         0.01824248 0.         0.\n  0.         0.         0.23569175 0.20173046 0.        ]\n [0.13882477 0.         0.03047215 0.         0.         0.\n  0.         0.97506716 0.         0.16552051 0.         0.\n  0.         0.82679883 0.         0.36923048 0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.83858256 0.         0.         0.54871531]\n [0.         0.         0.         0.         0.         0.\n  0.         0.75995541 0.         0.         0.4519486  0.\n  0.         0.         0.         0.         0.9106862  0.\n  0.         0.12281078 0.         0.         0.         0.59902936\n  0.         0.         0.         0.11669606 0.        ]\n [0.16673076 0.         0.37728597 0.         0.         0.\n  0.         0.33281579 0.56396509 0.         0.         0.69696146\n  0.         0.         0.         0.         0.         0.20507756\n  0.         0.37877263 0.         0.79428945 0.         0.\n  0.         0.         0.         0.         0.        ]\n [0.         0.         0.35414667 0.         0.         0.\n  0.         0.24435316 0.         0.         0.         0.95907479\n  0.         0.         0.         0.         0.         0.\n  0.35536245 0.33009951 0.         0.         0.         0.86721498\n  0.         0.         0.         0.         0.        ]\n [0.         0.         0.23321641 0.89421726 0.         0.\n  0.         0.53126575 0.         0.         0.49542363 0.18228388\n  0.71378245 0.         0.         0.20500181 0.         0.\n  0.         0.         0.         0.         0.         0.22902539\n  0.         0.         0.         0.         0.        ]\n [0.78151448 0.08451701 0.         0.10669925 0.         0.84231404\n  0.         0.79008464 0.         0.         0.79953713 0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.36535682 0.         0.         0.75240312\n  0.         0.         0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.84070999 0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.87862912 0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.86830111 0.1287484  0.         0.         0.45700022\n  0.43152814 0.         0.         0.0230226  0.         0.\n  0.39716383 0.         0.         0.52984002 0.         0.71845727\n  0.         0.         0.69371761 0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.4982477  0.         0.         0.68778472 0.47661948 0.\n  0.7072301  0.         0.         0.58419948 0.53533556 0.\n  0.73682248 0.         0.         0.91875052 0.        ]\n [0.         0.         0.19950693 0.74146091 0.         0.\n  0.         0.         0.         0.06234136 0.         0.06661911\n  0.60395787 0.         0.70698046 0.         0.3551043  0.\n  0.4731662  0.         0.         0.34252426 0.08920433 0.\n  0.         0.72051606 0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.75463529 0.73054914 0.         0.         0.73740521\n  0.60610188 0.         0.         0.         0.         0.\n  0.37882157 0.         0.72609559 0.         0.         0.84043963\n  0.         0.         0.         0.         0.00753436]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.48635748 0.\n  0.         0.23590603 0.71406408 0.92644942 0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.37922858 0.         0.         0.53503673]\n [0.         0.         0.         0.         0.22735098 0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.31619658 0.49398149 0.         0.         0.         0.\n  0.         0.         0.         0.56445854 0.        ]\n [0.         0.         0.74597453 0.         0.         0.\n  0.59727808 0.         0.15697768 0.         0.         0.\n  0.         0.         0.         0.13911619 0.         0.\n  0.         0.         0.         0.         0.59296291 0.\n  0.         0.45426797 0.         0.         0.        ]\n [0.         0.         0.73624718 0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.18632088 0.         0.         0.         0.58830668 0.82513268\n  0.72159655 0.91739561 0.         0.8996474  0.         0.\n  0.         0.         0.         0.         0.07732107]\n [0.         0.99725553 0.93369182 0.         0.         0.\n  0.         0.         0.         0.32064219 0.         0.\n  0.85081752 0.         0.         0.         0.         0.33744683\n  0.         0.         0.         0.         0.         0.89661026\n  0.         0.         0.53986064 0.         0.        ]\n [0.         0.         0.77188198 0.         0.08788762 0.\n  0.         0.         0.         0.         0.4795821  0.\n  0.         0.         0.         0.         0.03180468 0.\n  0.         0.         0.         0.         0.57599842 0.\n  0.         0.         0.96799407 0.99092948 0.        ]\n [0.         0.         0.         0.71095248 0.         0.\n  0.23611653 0.         0.51165701 0.         0.         0.\n  0.         0.         0.5984427  0.         0.         0.\n  0.48114539 0.         0.06892154 0.47396994 0.         0.\n  0.         0.         0.         0.         0.        ]\n [0.64882284 0.         0.53978106 0.75050192 0.68716551 0.82794089\n  0.         0.         0.         0.         0.         0.63375856\n  0.         0.         0.         0.         0.         0.61495026\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.85072746]\n [0.         0.         0.         0.         0.         0.\n  0.08729018 0.18640499 0.         0.         0.62410154 0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.93293807 0.         0.         0.         0.\n  0.53185748 0.93201434 0.         0.         0.49074878]\n [0.         0.0027109  0.         0.         0.         0.\n  0.37443537 0.         0.         0.55774227 0.         0.57315085\n  0.         0.         0.         0.         0.         0.25601553\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.74961623]\n [0.         0.91185241 0.04809464 0.         0.         0.\n  0.         0.         0.         0.         0.80586489 0.\n  0.         0.         0.60755522 0.         0.53659065 0.10486917\n  0.         0.         0.40895518 0.1007946  0.         0.\n  0.         0.05163548 0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.54860312 0.         0.         0.54892198\n  0.43874468 0.         0.         0.10291603 0.         0.\n  0.         0.         0.         0.68457155 0.         0.89966745\n  0.58653543 0.         0.71617907 0.         0.54284931]\n [0.         0.         0.986257   0.         0.         0.\n  0.         0.28792962 0.         0.         0.         0.\n  0.         0.34292686 0.         0.         0.         0.\n  0.         0.65136721 0.         0.         0.         0.\n  0.         0.         0.         0.         0.        ]]\nQ: Is the matrix mat_rnd is sparse?\nA: True\n\n\nA matrix-vector product: as usual (also can use np.dot())\n\nv = np.random.rand(n2)\nmat_rnd@v\n\narray([2.61669813, 1.499381  , 3.52424808, 0.28880999, 1.80696981,\n       2.73648057, 1.91076216, 1.60604812, 1.14763425, 2.28661943,\n       2.82694922, 1.05017783, 2.39440551, 3.573919  , 2.77251408,\n       2.41491509, 2.24616279, 0.97316849, 1.15948304, 3.01514273,\n       2.6008074 , 1.6812598 , 1.81454702, 2.82421069, 2.76038832,\n       1.69469361, 2.25664072, 3.00014748, 1.11966892])\n\n\n\n\nGraphs and sparsity\nA classical framework for the application of sparse matrices is with graphs: although the number of nodes can be huge, each node of a graph is in general not connected to all nodes. If we represent a graph by its adjacency matrix:\n\nDefinition: adjacency matrix\nSuppose that G=(V,E) is a graph, where \\left|V\\right|=n. Suppose that the vertices of G are arbitrarily numbered v_1,\\ldots,v_n. The adjacency matrix A of G is the matrix n \\times n of general term:\n\nA_{{i,j}}=\n\\left\\{\n     \\begin{array}{rl}\n         1, & \\text{if } (v_i,v_j) \\in E \\\\\n         0, & \\text{o.w.}\n      \\end{array}\n\\right.\n\nNote that instead of 1, the value could vary on a per-edge basis (cf. Figure 1).\n\n\n\n\n\n\nEXERCISE: Linear models & sparse matrices\n\n\n\nCreate a function that can fit ordinary least squares for sparse matrices (or not). In particular, handle the usual pre-processing step of standardizing the columns of the design matrix (i.e., centering columns and dividing by standard deviation)?\n\n\nUsage depends on the nature and structure of the data: - csc_matrix is more efficient for slicing by column - csr_matrix is more efficient for the row case.\n\nimport networkx as nx\nnx.__version__\n\n'3.1'\n\n\nCreate a graph:\n\nG = nx.Graph()\nG.add_edge('A', 'B', weight=4)\nG.add_edge('A', 'C', weight=3)\nG.add_edge('B', 'D', weight=2)\nG.add_edge('C', 'D', weight=4)\nG.add_edge('D', 'A', weight=2)\n\nand then visualize it:\nmy_seed = 44\nnx.draw_networkx(\n    G, with_labels=True, node_size=1000, pos=nx.spring_layout(G, seed=my_seed)\n)\n\nlabels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(\n    G, pos=nx.spring_layout(G, seed=my_seed), edge_labels=labels\n)\nnx.draw_networkx_edges(\n    G,\n    pos=nx.spring_layout(G, seed=my_seed),\n    width=[5 * i for i in list(labels.values())],\n)\nplt.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\n\n\nFigure 1: Plot a simple graph\n\n\n\n\n\n\n\n\n\n\n\n\nEXERCISE: Displaying graphs\n\n\n\n\nShow edge weights on the graph\n\n\n\nNote that a variant of adjacency matrix\nA = nx.adjacency_matrix(G)\nprint(isspmatrix(A))\nprint(A.todense())\nnx.shortest_path(G, 'C', 'B', weight='weight')\n\n\n\nTrue\n[[0 4 3 2]\n [4 0 0 2]\n [3 0 0 4]\n [2 2 4 0]]\n\n\n\n\n['C', 'D', 'B']",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#definition-incidence-matrix",
    "href": "Courses/TimeMemory/tp.html#definition-incidence-matrix",
    "title": "Time & memory efficiency",
    "section": "Definition : incidence matrix",
    "text": "Definition : incidence matrix\nLet G = (V,E) be a (non-oriented) graph with n vertices, V = [1,\\dots,n], and p edges, E = [1,\\dots,p]. The graph can be represented by its vertex-edge incidence matrix D^\\top \\in \\mathbb{R}^{p \\times n} defined by\n\n(D^\\top)_{{e,v}} =\n\\left\\{\n     \\begin{array}{rl}\n    + 1, & \\text{if } v = \\min(i,j) \\\\\n    -1, & \\text{si } v = \\max(i,j) \\\\\n    0, & \\text{sinon}\n  \\end{array}\n  \\right.\n\nwhere e = (i,j).",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#definition-laplacian-matrix",
    "href": "Courses/TimeMemory/tp.html#definition-laplacian-matrix",
    "title": "Time & memory efficiency",
    "section": "Definition : Laplacian matrix",
    "text": "Definition : Laplacian matrix\nThe matrix L=D D^\\top is the so-called graph Laplacian of G\n\nD = nx.incidence_matrix(G, oriented=True).T\nprint(isspmatrix(D))\nprint(D.todense())\n\nTrue\n[[-1.  1.  0.  0.]\n [-1.  0.  1.  0.]\n [-1.  0.  0.  1.]\n [ 0. -1.  0.  1.]\n [ 0.  0. -1.  1.]]",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#interactive-graph-visualisation",
    "href": "Courses/TimeMemory/tp.html#interactive-graph-visualisation",
    "title": "Time & memory efficiency",
    "section": "Interactive graph visualisation",
    "text": "Interactive graph visualisation\ng = nx.karate_club_graph()\n\nlist_degree = list(\n    g.degree()\n)  # Return a list of tuples each tuple is (node, deg)\nnodes, degree = map(\n    list, zip(*list_degree)\n)  # Build a node list and corresponding degree list\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nnx.draw(\n    g,\n    ax=ax,\n    nodelist=nodes,\n    node_size=[(v * 30) + 1 for v in degree],\n    width=4,\n    alpha=0.7,\n    edgecolors=\"white\",\n    node_color=\"#1f78b4\",\n    edge_color=\"#1f78b4\",\n)\nplt.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\n\nA = nx.adjacency_matrix(g).T\nprint(A.todense())\n\nax = plt.spy(A)\nprint(f\"Pourcentage of active edges: {(g.number_of_edges() / g.number_of_nodes()**2) * 100:.2f} %\")\n\n\n\n[[0 4 5 ... 2 0 0]\n [4 0 6 ... 0 0 0]\n [5 6 0 ... 0 2 0]\n ...\n [2 0 0 ... 0 4 4]\n [0 0 2 ... 4 0 5]\n [0 0 0 ... 4 5 0]]\nPourcentage of active edges: 6.75 %\n\n\n\n\n\n\n\n\nRemark: a possible visualization with Javascript (not so stable though, can be skipped)\n\nInteractive Networks with Networkx and D3\nner2sna: Entity Extraction and Network Analysis\n\n\nPlanar graphs and maps\nOpen Street Map interfaced with networkx, using the package osmnx.\nKnown bug: - Cannot import name ‘CRS’ from ‘pyproj’ in osmnx\n\nTypeError: argument of type ‘CRS’ is not iterable” with osmnx\n\nSo pick version 0.14 at least conda install osmnx&gt;=0.14 or pip install osmnx&gt;=0.10.\nFor Windows users, there might be some trouble with installing the fiona package, see:\n\nInstalling geopandas:” A GDAL API version must be specified (anaconda)\nInstall fiona on Windows\n\nSpecial case for osmnx on Windows follow the next step in order:\n\npip install osmnx\npip install Rtree\nconda install -c conda-forge libspatialindex=1.9.3\npip install osmnx\nInstall all packages required up to fiona.\nconda install -c conda-forge geopandas\nSay yes to everything\nOnce done, launch pip install osmnx==1.0.1 s You will also need to install the package folium\n\n\nimport folium\n\n\nmap_osm = folium.Map(location=[43.610769, 3.876716])\n\n\nmap_osm.add_child(folium.RegularPolygonMarker(location=[43.610769, 3.876716],\n                  fill_color='#132b5e', radius=5))\nmap_osm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport osmnx as ox\nox.settings.use_cache=True\nox.__version__\n\n'1.3.1.post0'\n\n\n\nG = ox.graph_from_place('Montpellier, France', network_type='bike')\nprint(f\"nb edges: {G.number_of_edges()}\")\nprint(f\"nb nodes: {G.number_of_nodes()}\")\n\nnb edges: 33992\nnb nodes: 15345\n\n\n\nfig, ax = ox.plot_graph(G)",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#visualize-the-shortest-path-between-two-points",
    "href": "Courses/TimeMemory/tp.html#visualize-the-shortest-path-between-two-points",
    "title": "Time & memory efficiency",
    "section": "Visualize the shortest path between two points",
    "text": "Visualize the shortest path between two points\nReferences:\n\nOpenStreetMap Roads Data Using osmnx\n\n\norigin = ox.geocoder.geocode('Place Eugène Bataillon, Montpellier, France')\ndestination = ox.geocoder.geocode('Maison du Lez, Montpellier, France')\n\norigin_node = ox.nearest_nodes(G, origin[1], origin[0])\ndestination_node = ox.nearest_nodes(G, destination[1], destination[0])\n\nprint(origin)\nprint(destination)\nroute = ox.distance.shortest_path(G, origin_node, destination_node)\n# XXX double check if weights are taken into account.\n\n(43.6314565, 3.8607694)\n(43.61032245, 3.8966295)\n\n\n\nfig, ax = ox.plot_graph_route(G, route)\n\n\n\n\n\nax = ox.plot_route_folium(G, route, weight=5, color='#AA1111', opacity=0.7)\nax\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nG.is_multigraph()\n\nTrue\n\n\n\nedges = ox.graph_to_gdfs(G, nodes=False, edges=True)\nnodes = ox.graph_to_gdfs(G, nodes=True, edges=False)\n# Check columns\nprint(edges.columns)\nprint(nodes.columns)\n\nIndex(['osmid', 'oneway', 'highway', 'reversed', 'length', 'geometry', 'lanes',\n       'name', 'maxspeed', 'junction', 'ref', 'bridge', 'service', 'access',\n       'width', 'tunnel'],\n      dtype='object')\nIndex(['y', 'x', 'street_count', 'highway', 'ref', 'geometry'], dtype='object')\n\n\n\nD = nx.incidence_matrix(G, oriented=True).T\n\n\nelement = np.zeros(1, dtype=float)\nmem = np.prod(D.shape) * element.data.nbytes / (1024**2)\nprint('Size of full matrix with zeros: {0:3.2f}  MB'.format(mem))\n\nprint('Size of sparse matrix: {0:3.2f}  MB'.format(D.data.nbytes/(1024**2) ))\n\nprint('Ratio  of full matrix size / sparse: {0:3.2f}%'.format(100 * D.data.nbytes / (1024**2 * mem)))\nprint(isspmatrix(D))\n\nSize of full matrix with zeros: 3979.55  MB\nSize of sparse matrix: 0.51  MB\nRatio  of full matrix size / sparse: 0.01%\nTrue\n\n\nAlternatively: you can uncomment the following line, and check that the size of a similar matrix (with a non-sparse format) would be. &gt;&gt;&gt; Size of a full matrix encoding the zeros: 4 gB\nCreate a matrix of similar size. BEWARE: This creates a huge matrix:\nM = np.random.randn(G.number_of_nodes(), G.number_of_nodes())\nprint('Size of a full encoding the zeros: {0:3.2f}  MB'.format(M.nbytes/(1024**2)))\n\nGraph sparsity\n\nprint(\" {0:.2} % of edges only are needed to represent the graph of Montpellier\".format(100 * G.number_of_edges() / G.number_of_nodes() ** 2))\n\n 0.014 % of edges only are needed to represent the graph of Montpellier\n\n\nReferences:\n\nOSMnx: Python for Street Networks\nNetwork analysis in Python\nhttps://autogis-site.readthedocs.io/en/latest/index.html",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#for-more-on-profiling",
    "href": "Courses/TimeMemory/tp.html#for-more-on-profiling",
    "title": "Time & memory efficiency",
    "section": "For more on profiling",
    "text": "For more on profiling\n\nsnakeviz, in Python\nprofvis, in R",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#debugging-package-pdb",
    "href": "Courses/TimeMemory/tp.html#debugging-package-pdb",
    "title": "Time & memory efficiency",
    "section": "Debugging: package pdb",
    "text": "Debugging: package pdb\nReferences:\n\nDebugging Jupyter notebooks by David Hamann\nAdvanced Python Debugging with pdb by Steven Kryskalla\nDebug Python with VSCode\n\nLet us use import pdb; pdb.set_trace() to enter a code and inspect it. Push the key c and then enter to go next.\nA first recommendation is to use the python debugger in your IDE.\nPure python or IPython can use the pdb package and the command pdb.set_trace(). A command prompt launches when an error is met, and you can check the current status of the environment. Useful shortcuts are available (e.g., touche c, touche j etc.); a full list is available here.s\ndef function_debile(x):\n    answer = 42\n    answer += x\n    return answer\nfunction_debile(12)\ndef illustrate_pdb(x):\n    answer = 42\n    import pdb; pdb.set_trace()\n    answer += x\n    return answer\nillustrate_pdb(12)\nA terminal is launched when a problem occurs, and one can then take over and see what’s going on.\nget_ipython().run_line_magic('pdb', '')\ndef blobl_func(x):\n    answer = 0\n    for i in range(x, -1, -1):\n        print(i)\n        answer += 1 / i\n\n    return answer\n\nblobl_func(4)",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/Test/tp.html",
    "href": "Courses/Test/tp.html",
    "title": "Unit Tests",
    "section": "",
    "text": "Disclaimer: this course is adapted from the following sources:",
    "crumbs": [
      "Dev. Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Test/tp.html#tests",
    "href": "Courses/Test/tp.html#tests",
    "title": "Unit Tests",
    "section": "Tests",
    "text": "Tests\nTests are small pieces of code ensuring that a part of a program is working as expected.\n\nWhy tests are useful\nThis is why we place the uttermost importance on implementing tests along the development steps. It will help you to ensure:\n\nthat code works correctly.\nthat changes do not break anything.\nthat bugs are not reintroduced.\nrobustness to user errors.\ncode is reachable (i.e., it will actually be executed)\netc.\n\n\n\nTypes of tests\nThere are different kinds of tests, with the more important ones being:\n\nUnit tests: test whether a simple unit element (function, class, etc.) does the right thing.\nIntegration tests: test whether the different parts used by your software work well together.\nNon-regression tests: test whether a new or modified functionality works correctly and that previous functionalities were not affected (e.g., removing a bug does not alter the rest of the code).\n\n\n\nHow to test?\nMany coding languages come with their own test framework. In python, we will focus on pytest. It is simple though powerful. pytest searches for all test*.py files and runs all test* methods found. It outputs a nice error report.\n\n\n\n\n\n\nEXERCISE: pytest\n\n\n\n\nInstall pytest with pip using the user scheme (--user option)\nTest if the command pytest is in your PATH (depending on your configuration you will have to add ~/.local/bin in PATH)\n\n\n\nGet the path to pytest binary as follows with python:\n\nimport pytest\npytest.__path__\n\nThis outputs a directory containing the pytest binary, say /path/to/pytest. Then, to add the path containing pytest in your (Linux) system, you have to type the following command in your terminal:\n$ export PATH=$PATH:/path/to/pytest\n$ pytest --help\n\n\nExample\nLet us assume we have a file inc.py containing\ndef inc1(x):\n    return x + 1\n\ndef inc2(x):\n    return x + 2\nThence, the content of test_inc.py is\nfrom inc import inc1, inc2\n\n# This test will work\ndef test_inc1():\n    assert inc1(3) == 4\n\n# This test will fail\ndef test_inc2():\n    assert inc2(-1) == 4\nTo run these tests:\n$ pytest test_inc.py\n\n\n\n\n\n\nEXERCISE: documentation\n\n\n\n\nCorrect the test_inc2 test.\nDetermine the syntax to run any test in a directory.\nDetermine the syntax to run only the test called test_inc1.",
    "crumbs": [
      "Dev. Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Test/tp.html#code-coverage",
    "href": "Courses/Test/tp.html#code-coverage",
    "title": "Unit Tests",
    "section": "Code coverage",
    "text": "Code coverage\npytest comes with some useful plugins. In particular, we will use the coverage report plugin.\nA test coverage is a measure used to describe the degree to which the source code of a program is executed when a particular test suite runs. A program with high test coverage, measured as a percentage, has had more of its source code executed during testing: this suggests it has a lower chance of containing undetected software bugs compared to a program with low test coverage.\nTo install the coverage plugin simply run the pip command:\n$ pip install pytest-cov\nAssuming the inc_cov.py contains:\ndef inc(x):\n    if x &lt; 0:\n        return 0\n    return x + 1\n\ndef dec(x):\n     return x - 1\nand a single test is performed through the file test_inc_cov.py\nfrom inc_cov import inc\n\ndef test_inc():\n     assert inc(3) == 4\nthen\npytest test_inc_cov.py --cov\n============================= test session starts =============================\nplatform linux -- Python 3.10.10, pytest-7.4.2, pluggy-1.0.0\nrootdir: /home/jsalmon/Documents/Mes_cours/Montpellier/HAX712X/Courses/Test\nplugins: dash-2.9.3, cov-4.1.0, anyio-3.6.2\ncollected 1 item\n\ntest_inc_cov.py                                                          [100%]\n\n---------- coverage: platform linux, python 3.10.10-final-0 ----------\nName              Stmts   Miss  Cover\n-------------------------------------\ninc_cov.py            6      2    67%\ntest_inc_cov.py       3      0   100%\n-------------------------------------\nTOTAL                 9      2    78%\n\n\n===============================================================================\n1 passed in 0.02s\n===============================================================================\nTwo lines in inc_cov module were not used. See\npytest --cov --cov-report=html test_inc_cov.py\n\n============================= test session starts =============================\nplatform linux -- Python 3.10.10, pytest-7.4.2, pluggy-1.0.0\nrootdir: /home/jsalmon/Documents/Mes_cours/Montpellier/HAX712X/Courses/Test\nplugins: dash-2.9.3, cov-4.1.0, anyio-3.6.2\ncollected 1 item\n\ntest_inc_cov.py                                                          [100%]\n\n---------- coverage: platform linux, python 3.10.10-final-0 ----------\nCoverage HTML written to dir htmlcov\nfor details.\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nInstall the pytest’s coverage plugin.\nLoad the biketrauma package you can download at https://github.com/HMMA238-2020/biketrauma/\nAdd some unit tests to biketrauma in a new sub-directory ./biketrauma/tests/:\n\nCreate a first test_df() that test if the Côtes-d’or département has 152 accidents. Add a second test_df_log() testing that the log of the number of accidents in the département 92 is close to 7.161622002.\nCreate a test_dl() function that tests the md5sum hash of the downloaded file (a.k.a. bicycle_db.csv). You may use the pooch package or you can use this piece of code to compute the md5sum:\n\n\n\n\nimport hashlib\ndef md5(fname):\n    hash_md5 = hashlib.md5()\n    with open(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            hash_md5.update(chunk)\n    return hash_md5.hexdigest()\nBy running the following line in the biketrauma/biketrauma location:\npytest --cov-report=html --cov=biketrauma tests/\nyou should reach 79% of code coverage, and the report should look like this (see the htmlcov/index.html file for an interactive report):\n---------- coverage: platform linux, python 3.10.10-final-0 ----------\nName                                    Stmts   Miss  Cover\n----------------------------------------------------------------------\nbiketrauma/__init__.py                      4      0   100%\nbiketrauma/io/Load_db.py                   22      5    77%\nbiketrauma/io/__init__.py                   3      0   100%\nbiketrauma/preprocess/__init__.py           0      0   100%\nbiketrauma/preprocess/get_accident.py       7      0   100%\nbiketrauma/vis/__init__.py                  0      0   100%\nbiketrauma/vis/plot_location.py             6      4    33%\n----------------------------------------------------------------------\nTOTAL                                      42      9    79%",
    "crumbs": [
      "Dev. Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Test/tp.html#references",
    "href": "Courses/Test/tp.html#references",
    "title": "Unit Tests",
    "section": "References",
    "text": "References\n\nThe pytest documentation\nWikipedia: Code coverage",
    "crumbs": [
      "Dev. Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Venv/tp.html",
    "href": "Courses/Venv/tp.html",
    "title": "Virtual Python Environment",
    "section": "",
    "text": "A venv is an isolated standalone python distribution with a specific version of modules. This is useful when one needs to run different python versions in a single system. Various commands can create a venv: venv, virtualenv, conda… We are going to use Anaconda to set up various python virtual environments on our system.\nReferences: - Virtualenv - Python documentation on venv",
    "crumbs": [
      "Dev. Tools",
      "Virtual Python Environment"
    ]
  },
  {
    "objectID": "Courses/Venv/tp.html#preamble",
    "href": "Courses/Venv/tp.html#preamble",
    "title": "Virtual Python Environment",
    "section": "",
    "text": "A venv is an isolated standalone python distribution with a specific version of modules. This is useful when one needs to run different python versions in a single system. Various commands can create a venv: venv, virtualenv, conda… We are going to use Anaconda to set up various python virtual environments on our system.\nReferences: - Virtualenv - Python documentation on venv",
    "crumbs": [
      "Dev. Tools",
      "Virtual Python Environment"
    ]
  },
  {
    "objectID": "Courses/Venv/tp.html#python-package-system",
    "href": "Courses/Venv/tp.html#python-package-system",
    "title": "Virtual Python Environment",
    "section": "Python package system",
    "text": "Python package system\nThe Python Package Index (PyPI) is a repository of software for the python programming language. PyPI helps you find and install software developed and shared by the python community.\nThe pip program allows you to install most standard packages:\n$ pip --version\n$ pip install numpy\nReferences: - Pypi - Installing Packages\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nDetermine which python version there is on your system using locate and which\nDetermine which version of python is used by the pip command\nList all the python modules installed with the pip command",
    "crumbs": [
      "Dev. Tools",
      "Virtual Python Environment"
    ]
  },
  {
    "objectID": "Courses/Venv/tp.html#anaconda",
    "href": "Courses/Venv/tp.html#anaconda",
    "title": "Virtual Python Environment",
    "section": "Anaconda",
    "text": "Anaconda\nAnaconda is a package manager, an environment manager coming with a python/R data science distribution, and a large collection of open-source packages. It is cross-platform and is a very popular choice in the data scientist community. Nevertheless, it suffers from a main drawback: it is heavy. Moreover, it comes with its own package manager conda which allows you to install a python module (like pip) and other programs.\nOn the Linux box provided by the FdS, there is a terminal with the $PATH environment variable already configured (/net/apps/bin/init_anaconda3). You may launch it via the Graphical User Interface.\nYou can see also the mamba project https://github.com/mamba-org/mamba.\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nDisplay the $PATH variable in the Anaconda_init terminal\nType conda deactivate and (re)-display the $PATH variable\n\n\n\n\nCreating an environment\nUse the terminal or an Anaconda Prompt for the following steps:\n\nTo create an environment:\n$ conda create --name myenv\nReplace myenv with the environment name.\nWhen conda asks you to proceed, type y:\n  proceed ([y]/n)?\nBy default, environments are installed into the envs sub-directory in your conda directory. See conda create --help for information on specifying a different path. This creates the myenv environment in envs/. This environment uses the same version of python that you are currently using because you did not specify a version.\nTo create an environment with a specific version of python:\n$ conda create -n myenv python=3.9\nTo create an environment with a specific package:\n$ conda create -n myenv scipy\nor:\n$ conda create -n myenv python\n$ conda install -n myenv scipy\nTo create an environment with a specific version of a package:\n$ conda create -n myenv scipy=0.15.0\nor\n$ conda create -n myenv python\n$ conda install -n myenv scipy=0.15.0\nTo create an environment with a specific version of python and multiple packages:\n$ conda create -n myenv python=3.6 scipy=0.15.0 astroid babel\n\nSee: https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nCreate a new environment called toto with python3.5 and pandas version 0.23\nCreate another environment called tata with python3.7 and pandas version 1.0\n\n\n\n\n\nSwitch environment\nTo switch to an environment, it must be “activated” (in git we would have said “to checkout”). Activation entails two primary functions: adding entries to PATH for the environment and running any activation scripts that the environment may contain. These activation scripts are how packages can set arbitrary environment variables that may be necessary for their operation. You can also use the config API to set environment variables. To activate an environment:\n$ conda activate myenv\nChange myenv with the name of your environment.\nSee: https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#activating-an-environment\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nActivate the toto environment. Launch python and check the version of pandas\nActivate the tata environment. Launch python and check the version of pandas\nList all the available environments (look in the documentation by yourself)\nCome back to the base environment\n\n\n\n\n\nSave and export an environment\nReferences: Building identical conda environments\n\n\n\n\n\n\nEXERCISE:\n\n\n\nImagine that you are coding a python module and some users are not able to run your code due to some missing dependencies. How can you help them to set up the python venv?\n\n\n\n\nRemoving an environment and cleaning\nAnaconda is particularly greedy in terms of disk usage. It can be a good practice to remove an unused environment\n$ conda env remove -n myenv\nTo remove all cache and package run\n$ conda clean --all\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nRemove all the environments created during this session\nCreate an environment called hax712_env with matplotlib (this venv will be used in the next courses)\nClean the conda caches to free disk space.",
    "crumbs": [
      "Dev. Tools",
      "Virtual Python Environment"
    ]
  }
]