[
  {
    "objectID": "Courses/TimeMemory/tp.html",
    "href": "Courses/TimeMemory/tp.html",
    "title": "Time & memory efficiency",
    "section": "",
    "text": "import time\nimport numpy as np\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#timecomputation-usage-of-timeit",
    "href": "Courses/TimeMemory/tp.html#timecomputation-usage-of-timeit",
    "title": "Time & memory efficiency",
    "section": "Time/computation: usage of %timeit",
    "text": "Time/computation: usage of %timeit\nReferences:\n\nBuilt-in magic commands\nautoreload\n\nmagic commands are IPython commands such as: %timeit, %matplotlib, %autoreload. They work only in interactive cases (Ipython, Notebook, Jupyter lab etc.).\n\nn = 1000\nval = 5.4\n\n\n%timeit a = np.empty(n); a.fill(val)\n# Alternative: uncomment below\n# get_ipython().run_line_magic('timeit', 'a = np.empty(n); a.fill(val)')\n\n597 ns ± 44.1 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('empty')\n%timeit a = np.empty(n); a[:] = val\n\nempty\n774 ns ± 52.3 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\nprint('full')\n\n%timeit a = np.full((n,), val)\n\n1.49 µs ± 17.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('ones')\n\nones\n\n\n\n%timeit a = np.ones(n) * val\n\n3.11 µs ± 202 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n\n\nprint('repeat')\n\nrepeat\n\n\n\n%timeit a = np.repeat(val, n)\n\n4.29 µs ± 11.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#alternatives",
    "href": "Courses/TimeMemory/tp.html#alternatives",
    "title": "Time & memory efficiency",
    "section": "Alternatives",
    "text": "Alternatives\nUse the time module thanks to import time\n\nimport time\nstart = time.time()\na = np.ones(n) * val\nend = time.time()\nprint(\"Time to execute the command: {0:.5f} s.\".format(end - start))\n\nTime to execute the command: 0.00010 s.",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#sparse-matrices-graphs-and-memory",
    "href": "Courses/TimeMemory/tp.html#sparse-matrices-graphs-and-memory",
    "title": "Time & memory efficiency",
    "section": "Sparse matrices, graphs and memory",
    "text": "Sparse matrices, graphs and memory\nSparse matrices are useful to handle potentially huge matrices, that have only a few non-zero coefficients:\n\nScipy Lectures: why sparse matrices\nSparse data structures in Python, by Artem Golubin\nIntroduction to Sparse Matrices in Python with SciPy, by cmdlinetips\n\nExamples:\n\nNatural language processing: We encode the presence of a word from a dictionary (let’s say the set of French words) and we put 0 / 1 in case of absence/presence of a word.\nOne-hot encoding, used to represent categorical data as sparse binary vectors.\nthe discretization of a physical system where very distant influences are set to zero (e.g. heat diffusion, fluid mechanics, electro/magnetism, etc.)\nGraphs: they are naturally represented by adjacency or incidence matrices (cf. below), and therefore beyond the graphs, maps!\n\n\nMost common formats\n\ncoo_matrix(arg1[, shape, dtype, copy]): A sparse matrix in COOrdinate format.\ncsc_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Column matrix\ncsr_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Row matrix\n\nReferences:\n\nScipy doc on sparse matrices\n\n\nfrom scipy import sparse\nfrom scipy.sparse import isspmatrix\n\nId = sparse.eye(3)\nprint(Id.toarray())\nprint(f'Q: Is the matrix Id is sparse?\\nA: {isspmatrix(Id)}')\n\nn1 = 29\nn2 = 29\nmat_rnd = sparse.rand(n1, n2, density=0.25, format=\"csr\",\n                      random_state=42)\nprint(mat_rnd.toarray())\nprint(f'Q: Is the matrix mat_rnd is sparse?\\nA: {isspmatrix(mat_rnd)}')\n\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\nQ: Is the matrix Id is sparse?\nA: True\n[[0.         0.68298206 0.         0.         0.         0.\n  0.14312799 0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.4878098  0.\n  0.         0.35599148 0.10221266 0.         0.56550835 0.7677795\n  0.42359686 0.2253328  0.         0.53648135 0.        ]\n [0.         0.5344235  0.         0.         0.         0.\n  0.         0.39148211 0.         0.         0.84444067 0.\n  0.         0.         0.         0.         0.09229059 0.50610396\n  0.         0.         0.10424697 0.         0.         0.\n  0.         0.         0.         0.         0.        ]\n [0.77857194 0.82086147 0.77124667 0.         0.90786613 0.\n  0.         0.         0.         0.         0.13311693 0.\n  0.99769262 0.         0.         0.         0.         0.00530001\n  0.         0.         0.         0.         0.92404176 0.00259502\n  0.50228835 0.         0.08786811 0.33034848 0.        ]\n [0.         0.         0.         0.         0.         0.01220307\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.5938831\n  0.         0.         0.         0.         0.        ]\n [0.         0.7228961  0.         0.         0.14773909 0.\n  0.         0.         0.         0.         0.05565349 0.\n  0.32158276 0.         0.         0.20454459 0.57748627 0.40851829\n  0.         0.         0.         0.01824248 0.         0.\n  0.         0.         0.23569175 0.20173046 0.        ]\n [0.13882477 0.         0.03047215 0.         0.         0.\n  0.         0.97506716 0.         0.16552051 0.         0.\n  0.         0.82679883 0.         0.36923048 0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.83858256 0.         0.         0.54871531]\n [0.         0.         0.         0.         0.         0.\n  0.         0.75995541 0.         0.         0.4519486  0.\n  0.         0.         0.         0.         0.9106862  0.\n  0.         0.12281078 0.         0.         0.         0.59902936\n  0.         0.         0.         0.11669606 0.        ]\n [0.16673076 0.         0.37728597 0.         0.         0.\n  0.         0.33281579 0.56396509 0.         0.         0.69696146\n  0.         0.         0.         0.         0.         0.20507756\n  0.         0.37877263 0.         0.79428945 0.         0.\n  0.         0.         0.         0.         0.        ]\n [0.         0.         0.35414667 0.         0.         0.\n  0.         0.24435316 0.         0.         0.         0.95907479\n  0.         0.         0.         0.         0.         0.\n  0.35536245 0.33009951 0.         0.         0.         0.86721498\n  0.         0.         0.         0.         0.        ]\n [0.         0.         0.23321641 0.89421726 0.         0.\n  0.         0.53126575 0.         0.         0.49542363 0.18228388\n  0.71378245 0.         0.         0.20500181 0.         0.\n  0.         0.         0.         0.         0.         0.22902539\n  0.         0.         0.         0.         0.        ]\n [0.78151448 0.08451701 0.         0.10669925 0.         0.84231404\n  0.         0.79008464 0.         0.         0.79953713 0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.36535682 0.         0.         0.75240312\n  0.         0.         0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.84070999 0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.87862912 0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.86830111 0.1287484  0.         0.         0.45700022\n  0.43152814 0.         0.         0.0230226  0.         0.\n  0.39716383 0.         0.         0.52984002 0.         0.71845727\n  0.         0.         0.69371761 0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.4982477  0.         0.         0.68778472 0.47661948 0.\n  0.7072301  0.         0.         0.58419948 0.53533556 0.\n  0.73682248 0.         0.         0.91875052 0.        ]\n [0.         0.         0.19950693 0.74146091 0.         0.\n  0.         0.         0.         0.06234136 0.         0.06661911\n  0.60395787 0.         0.70698046 0.         0.3551043  0.\n  0.4731662  0.         0.         0.34252426 0.08920433 0.\n  0.         0.72051606 0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.75463529 0.73054914 0.         0.         0.73740521\n  0.60610188 0.         0.         0.         0.         0.\n  0.37882157 0.         0.72609559 0.         0.         0.84043963\n  0.         0.         0.         0.         0.00753436]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.48635748 0.\n  0.         0.23590603 0.71406408 0.92644942 0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.37922858 0.         0.         0.53503673]\n [0.         0.         0.         0.         0.22735098 0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.31619658 0.49398149 0.         0.         0.         0.\n  0.         0.         0.         0.56445854 0.        ]\n [0.         0.         0.74597453 0.         0.         0.\n  0.59727808 0.         0.15697768 0.         0.         0.\n  0.         0.         0.         0.13911619 0.         0.\n  0.         0.         0.         0.         0.59296291 0.\n  0.         0.45426797 0.         0.         0.        ]\n [0.         0.         0.73624718 0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.18632088 0.         0.         0.         0.58830668 0.82513268\n  0.72159655 0.91739561 0.         0.8996474  0.         0.\n  0.         0.         0.         0.         0.07732107]\n [0.         0.99725553 0.93369182 0.         0.         0.\n  0.         0.         0.         0.32064219 0.         0.\n  0.85081752 0.         0.         0.         0.         0.33744683\n  0.         0.         0.         0.         0.         0.89661026\n  0.         0.         0.53986064 0.         0.        ]\n [0.         0.         0.77188198 0.         0.08788762 0.\n  0.         0.         0.         0.         0.4795821  0.\n  0.         0.         0.         0.         0.03180468 0.\n  0.         0.         0.         0.         0.57599842 0.\n  0.         0.         0.96799407 0.99092948 0.        ]\n [0.         0.         0.         0.71095248 0.         0.\n  0.23611653 0.         0.51165701 0.         0.         0.\n  0.         0.         0.5984427  0.         0.         0.\n  0.48114539 0.         0.06892154 0.47396994 0.         0.\n  0.         0.         0.         0.         0.        ]\n [0.64882284 0.         0.53978106 0.75050192 0.68716551 0.82794089\n  0.         0.         0.         0.         0.         0.63375856\n  0.         0.         0.         0.         0.         0.61495026\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.85072746]\n [0.         0.         0.         0.         0.         0.\n  0.08729018 0.18640499 0.         0.         0.62410154 0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.93293807 0.         0.         0.         0.\n  0.53185748 0.93201434 0.         0.         0.49074878]\n [0.         0.0027109  0.         0.         0.         0.\n  0.37443537 0.         0.         0.55774227 0.         0.57315085\n  0.         0.         0.         0.         0.         0.25601553\n  0.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.74961623]\n [0.         0.91185241 0.04809464 0.         0.         0.\n  0.         0.         0.         0.         0.80586489 0.\n  0.         0.         0.60755522 0.         0.53659065 0.10486917\n  0.         0.         0.40895518 0.1007946  0.         0.\n  0.         0.05163548 0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.54860312 0.         0.         0.54892198\n  0.43874468 0.         0.         0.10291603 0.         0.\n  0.         0.         0.         0.68457155 0.         0.89966745\n  0.58653543 0.         0.71617907 0.         0.54284931]\n [0.         0.         0.986257   0.         0.         0.\n  0.         0.28792962 0.         0.         0.         0.\n  0.         0.34292686 0.         0.         0.         0.\n  0.         0.65136721 0.         0.         0.         0.\n  0.         0.         0.         0.         0.        ]]\nQ: Is the matrix mat_rnd is sparse?\nA: True\n\n\nA matrix-vector product: as usual (also can use np.dot())\n\nv = np.random.rand(n2)\nmat_rnd@v\n\narray([2.71237033, 1.0431075 , 2.85572121, 0.56469918, 1.8730868 ,\n       1.95962166, 2.14738717, 1.62961221, 1.61248435, 2.14217773,\n       2.59164342, 0.95362795, 2.7907171 , 3.09799957, 2.45186718,\n       2.80725577, 1.04805696, 0.77214455, 0.5279978 , 2.486586  ,\n       2.90816649, 1.24335344, 1.72744889, 2.86509439, 1.17624186,\n       1.42849732, 1.78139277, 3.13205528, 0.60223066])\n\n\n\n\nGraphs and sparsity\nA classical framework for the application of sparse matrices is with graphs: although the number of nodes can be huge, each node of a graph is in general not connected to all nodes. If we represent a graph by its adjacency matrix:\n\nDefinition: adjacency matrix\nSuppose that G=(V,E) is a graph, where \\left|V\\right|=n. Suppose that the vertices of G are arbitrarily numbered v_1,\\ldots,v_n. The adjacency matrix A of G is the matrix n \\times n of general term:\n\nA_{{i,j}}=\n\\left\\{\n     \\begin{array}{rl}\n         1, & \\text{if } (v_i,v_j) \\in E \\\\\n         0, & \\text{o.w.}\n      \\end{array}\n\\right.\n\nNote that instead of 1, the value could vary on a per-edge basis (cf. Figure 1).\n\n\n\n\n\n\nEXERCISE: Linear models & sparse matrices\n\n\n\nCreate a function that can fit ordinary least squares for sparse matrices (or not). In particular, handle the usual pre-processing step of standardizing the columns of the design matrix (i.e., centering columns and dividing by standard deviation)?\n\n\nUsage depends on the nature and structure of the data: - csc_matrix is more efficient for slicing by column - csr_matrix is more efficient for the row case.\n\nimport networkx as nx\nnx.__version__\n\n'3.1'\n\n\nCreate a graph:\n\nG = nx.Graph()\nG.add_edge('A', 'B', weight=4)\nG.add_edge('A', 'C', weight=3)\nG.add_edge('B', 'D', weight=2)\nG.add_edge('C', 'D', weight=4)\nG.add_edge('D', 'A', weight=2)\n\nand then visualize it:\nmy_seed = 44\nnx.draw_networkx(\n    G, with_labels=True, node_size=1000, pos=nx.spring_layout(G, seed=my_seed)\n)\n\nlabels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(\n    G, pos=nx.spring_layout(G, seed=my_seed), edge_labels=labels\n)\nnx.draw_networkx_edges(\n    G,\n    pos=nx.spring_layout(G, seed=my_seed),\n    width=[5 * i for i in list(labels.values())],\n)\nplt.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\n\n\nFigure 1: Plot a simple graph\n\n\n\n\n\n\n\n\n\n\n\n\nEXERCISE: Displaying graphs\n\n\n\n\nShow edge weights on the graph\n\n\n\nNote that a variant of adjacency matrix\nA = nx.adjacency_matrix(G)\nprint(isspmatrix(A))\nprint(A.todense())\nnx.shortest_path(G, 'C', 'B', weight='weight')\n\n\n\nTrue\n[[0 4 3 2]\n [4 0 0 2]\n [3 0 0 4]\n [2 2 4 0]]\n\n\n\n\n['C', 'D', 'B']",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#definition-incidence-matrix",
    "href": "Courses/TimeMemory/tp.html#definition-incidence-matrix",
    "title": "Time & memory efficiency",
    "section": "Definition : incidence matrix",
    "text": "Definition : incidence matrix\nLet G = (V,E) be a (non-oriented) graph with n vertices, V = [1,\\dots,n], and p edges, E = [1,\\dots,p]. The graph can be represented by its vertex-edge incidence matrix D^\\top \\in \\mathbb{R}^{p \\times n} defined by\n\n(D^\\top)_{{e,v}} =\n\\left\\{\n     \\begin{array}{rl}\n    + 1, & \\text{if } v = \\min(i,j) \\\\\n    -1, & \\text{si } v = \\max(i,j) \\\\\n    0, & \\text{sinon}\n  \\end{array}\n  \\right.\n\nwhere e = (i,j).",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#definition-laplacian-matrix",
    "href": "Courses/TimeMemory/tp.html#definition-laplacian-matrix",
    "title": "Time & memory efficiency",
    "section": "Definition : Laplacian matrix",
    "text": "Definition : Laplacian matrix\nThe matrix L=D D^\\top is the so-called graph Laplacian of G\n\nD = nx.incidence_matrix(G, oriented=True).T\nprint(isspmatrix(D))\nprint(D.todense())\n\nTrue\n[[-1.  1.  0.  0.]\n [-1.  0.  1.  0.]\n [-1.  0.  0.  1.]\n [ 0. -1.  0.  1.]\n [ 0.  0. -1.  1.]]",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#interactive-graph-visualisation",
    "href": "Courses/TimeMemory/tp.html#interactive-graph-visualisation",
    "title": "Time & memory efficiency",
    "section": "Interactive graph visualisation",
    "text": "Interactive graph visualisation\ng = nx.karate_club_graph()\n\nlist_degree = list(\n    g.degree()\n)  # Return a list of tuples each tuple is (node, deg)\nnodes, degree = map(\n    list, zip(*list_degree)\n)  # Build a node list and corresponding degree list\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nnx.draw(\n    g,\n    ax=ax,\n    nodelist=nodes,\n    node_size=[(v * 30) + 1 for v in degree],\n    width=4,\n    alpha=0.7,\n    edgecolors=\"white\",\n    node_color=\"#1f78b4\",\n    edge_color=\"#1f78b4\",\n)\nplt.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\n\nA = nx.adjacency_matrix(g).T\nprint(A.todense())\n\nax = plt.spy(A)\nprint(f\"Pourcentage of active edges: {(g.number_of_edges() / g.number_of_nodes()**2) * 100:.2f} %\")\n\n\n\n[[0 4 5 ... 2 0 0]\n [4 0 6 ... 0 0 0]\n [5 6 0 ... 0 2 0]\n ...\n [2 0 0 ... 0 4 4]\n [0 0 2 ... 4 0 5]\n [0 0 0 ... 4 5 0]]\nPourcentage of active edges: 6.75 %\n\n\n\n\n\n\n\n\nRemark: a possible visualization with Javascript (not so stable though, can be skipped)\n\nInteractive Networks with Networkx and D3\nner2sna: Entity Extraction and Network Analysis\n\n\nPlanar graphs and maps\nOpen Street Map interfaced with networkx, using the package osmnx.\nKnown bug: - Cannot import name ‘CRS’ from ‘pyproj’ in osmnx\n\nTypeError: argument of type ‘CRS’ is not iterable” with osmnx\n\nSo pick version 0.14 at least conda install osmnx&gt;=0.14 or pip install osmnx&gt;=0.10.\nFor Windows users, there might be some trouble with installing the fiona package, see:\n\nInstalling geopandas:” A GDAL API version must be specified (anaconda)\nInstall fiona on Windows\n\nSpecial case for osmnx on Windows follow the next step in order:\n\npip install osmnx\npip install Rtree\nconda install -c conda-forge libspatialindex=1.9.3\npip install osmnx\nInstall all packages required up to fiona.\nconda install -c conda-forge geopandas\nSay yes to everything\nOnce done, launch pip install osmnx==1.0.1 s You will also need to install the package folium\n\n\nimport folium\n\n\nmap_osm = folium.Map(location=[43.610769, 3.876716])\n\n\nmap_osm.add_child(folium.RegularPolygonMarker(location=[43.610769, 3.876716],\n                  fill_color='#132b5e', radius=5))\nmap_osm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport osmnx as ox\nox.settings.use_cache=True\nox.__version__\n\n'1.3.1.post0'\n\n\n\nG = ox.graph_from_place('Montpellier, France', network_type='bike')\nprint(f\"nb edges: {G.number_of_edges()}\")\nprint(f\"nb nodes: {G.number_of_nodes()}\")\n\nnb edges: 33992\nnb nodes: 15345\n\n\n\nfig, ax = ox.plot_graph(G)",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#visualize-the-shortest-path-between-two-points",
    "href": "Courses/TimeMemory/tp.html#visualize-the-shortest-path-between-two-points",
    "title": "Time & memory efficiency",
    "section": "Visualize the shortest path between two points",
    "text": "Visualize the shortest path between two points\nReferences:\n\nOpenStreetMap Roads Data Using osmnx\n\n\norigin = ox.geocoder.geocode('Place Eugène Bataillon, Montpellier, France')\ndestination = ox.geocoder.geocode('Maison du Lez, Montpellier, France')\n\norigin_node = ox.nearest_nodes(G, origin[1], origin[0])\ndestination_node = ox.nearest_nodes(G, destination[1], destination[0])\n\nprint(origin)\nprint(destination)\nroute = ox.distance.shortest_path(G, origin_node, destination_node)\n# XXX double check if weights are taken into account.\n\n(43.6314565, 3.8607694)\n(43.61032245, 3.8966295)\n\n\n\nfig, ax = ox.plot_graph_route(G, route)\n\n\n\n\n\nax = ox.plot_route_folium(G, route, weight=5, color='#AA1111', opacity=0.7)\nax\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nG.is_multigraph()\n\nTrue\n\n\n\nedges = ox.graph_to_gdfs(G, nodes=False, edges=True)\nnodes = ox.graph_to_gdfs(G, nodes=True, edges=False)\n# Check columns\nprint(edges.columns)\nprint(nodes.columns)\n\nIndex(['osmid', 'oneway', 'highway', 'reversed', 'length', 'geometry', 'lanes',\n       'name', 'maxspeed', 'junction', 'ref', 'bridge', 'service', 'access',\n       'width', 'tunnel'],\n      dtype='object')\nIndex(['y', 'x', 'street_count', 'highway', 'ref', 'geometry'], dtype='object')\n\n\n\nD = nx.incidence_matrix(G, oriented=True).T\n\n\nelement = np.zeros(1, dtype=float)\nmem = np.prod(D.shape) * element.data.nbytes / (1024**2)\nprint('Size of full matrix with zeros: {0:3.2f}  MB'.format(mem))\n\nprint('Size of sparse matrix: {0:3.2f}  MB'.format(D.data.nbytes/(1024**2) ))\n\nprint('Ratio  of full matrix size / sparse: {0:3.2f}%'.format(100 * D.data.nbytes / (1024**2 * mem)))\nprint(isspmatrix(D))\n\nSize of full matrix with zeros: 3979.55  MB\nSize of sparse matrix: 0.51  MB\nRatio  of full matrix size / sparse: 0.01%\nTrue\n\n\nAlternatively: you can uncomment the following line, and check that the size of a similar matrix (with a non-sparse format) would be. &gt;&gt;&gt; Size of a full matrix encoding the zeros: 4 gB\nCreate a matrix of similar size. BEWARE: This creates a huge matrix:\nM = np.random.randn(G.number_of_nodes(), G.number_of_nodes())\nprint('Size of a full encoding the zeros: {0:3.2f}  MB'.format(M.nbytes/(1024**2)))\n\nGraph sparsity\n\nprint(\" {0:.2} % of edges only are needed to represent the graph of Montpellier\".format(100 * G.number_of_edges() / G.number_of_nodes() ** 2))\n\n 0.014 % of edges only are needed to represent the graph of Montpellier\n\n\nReferences:\n\nOSMnx: Python for Street Networks\nNetwork analysis in Python\nhttps://autogis-site.readthedocs.io/en/latest/index.html",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#for-more-on-profiling",
    "href": "Courses/TimeMemory/tp.html#for-more-on-profiling",
    "title": "Time & memory efficiency",
    "section": "For more on profiling",
    "text": "For more on profiling\n\nsnakeviz, in Python\nprofvis, in R",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  },
  {
    "objectID": "Courses/TimeMemory/tp.html#debugging-package-pdb",
    "href": "Courses/TimeMemory/tp.html#debugging-package-pdb",
    "title": "Time & memory efficiency",
    "section": "Debugging: package pdb",
    "text": "Debugging: package pdb\nReferences:\n\nDebugging Jupyter notebooks by David Hamann\nAdvanced Python Debugging with pdb by Steven Kryskalla\nDebug Python with VSCode\n\nLet us use import pdb; pdb.set_trace() to enter a code and inspect it. Push the key c and then enter to go next.\nA first recommendation is to use the python debugger in your IDE.\nPure python or IPython can use the pdb package and the command pdb.set_trace(). A command prompt launches when an error is met, and you can check the current status of the environment. Useful shortcuts are available (e.g., touche c, touche j etc.); a full list is available here.s\ndef function_debile(x):\n    answer = 42\n    answer += x\n    return answer\nfunction_debile(12)\ndef illustrate_pdb(x):\n    answer = 42\n    import pdb; pdb.set_trace()\n    answer += x\n    return answer\nillustrate_pdb(12)\nA terminal is launched when a problem occurs, and one can then take over and see what’s going on.\nget_ipython().run_line_magic('pdb', '')\ndef blobl_func(x):\n    answer = 0\n    for i in range(x, -1, -1):\n        print(i)\n        answer += 1 / i\n\n    return answer\n\nblobl_func(4)",
    "crumbs": [
      "Scientific Python",
      "Time & memory efficiency"
    ]
  }
]