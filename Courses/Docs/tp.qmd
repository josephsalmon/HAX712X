---
title: "Markup languages / Documentation"
---

Before starting a description of Sphinx, we first start by introducing, markdown, quarto and reStructuredText files.

**Disclaimer**: this course is mainly adapted from the [Quarto](https://quarto.org/) and [Sphinx documentation](http://www.sphinx-doc.org/en/stable/).


## Markdown
Markdown is a lightweight markup language developed by [John Gruber](https://en.wikipedia.org/wiki/John_Gruber) and
[Aaron Swartz](https://fr.wikipedia.org/wiki/Aaron_Swartz)^[[Aaron Swartz](https://fr.wikipedia.org/wiki/Aaron_Swartz): hacktivist (1986-2013) who also helped develop Creative Commons licenses, RSS, Reddit, etc. For more on his epic life, see Brian Knappenberger' documentary **The Internet's Own Boy: The Story of Aaron Swartz  (2014)**
<img src="https://upload.wikimedia.org/wikipedia/commons/0/06/Aaron_Swartz_profile.jpg" width="65%" style="display: block; margin-right: auto; margin-left: auto;"></img>]
.

Hence Markdown is an easy-to-read markup language, popular for simple text formatting, creating documentation for software projects, but also for writing nice emails (for [Thunderbird](https://addons.thunderbird.net/en-us/thunderbird/addon/markdown-here-xul/) or [any browser](https://www.markdownguide.org/tools/markdown-here/), etc.).

The extension for a Mardkown file is `.md`. To render such a file in VSCode or Codium, and possibly export a `.pdf` or `.html` file, you need to install a package for that (for instance the *Markdown All in One* could be installed with `Ctrl+Shift+p`, and looking for the right name in `Extensions: Install Extensions`).

:::: {.columns}

::: {.column width="45%"}

**Left:** Markdown code
```markdown

# Title level 1

## Title level 2


# Another title level 1

## Another title level 2


This would be a paragraph. You can use **bold font** but also *italic* or  ~~strikethrough~~.

Other elements are listed below :

- item 1
- item 2
  - sub-item 1
  - sub-item 2

```
:::

::: {.column width="5%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
**Right:** rendered

# Title level 1

## Title level 2




# Title level 1

## Title level 2

This would be a paragraph. You can use **bold font** but also *italic* or  ~~strikethrough~~.

Other elements are listed here :

- item 1
- item 2
  - sub-item 1
  - sub-item 2


:::

::::

A full description can be found here: <https://www.markdownguide.org/basic-syntax/>; a nice cheatsheet is also available here: <https://www.markdownguide.org/cheat-sheet/>.

## Quarto
Quarto is an open-source scientific and technical publishing system.
For instance, we have used it for creating the website you are reading right now. We describe here its main usage.
Quarto allows rendering markdown elements and creating a website easily, that can run some code (R, Python, etc.) and display the results (tables, figures, etc.), possibly in an interactive way.
The extension is `.qmd` for Quarto files.

As an example, you can see below how to create a code snippet in a Quarto, and how it is rendered, along with the code output.

:::: {.columns}

::: {.column width="45%"}

**Left:** Quarto code
```{{python}}
import numpy as np
print(np.sum(np.ones(12)))
```

:::

::: {.column width="5%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
**Right:** Rendered
```{python}
import numpy as np
print(np.sum(np.ones(12)))
```

:::

::::

Documentation for using `python` in Quarto: <https://quarto.org/docs/computations/python.html>

## reStructuredText

reStructuredText (`.RST`, `.ReST`, or `.reST`) is a file format for textual data used primarily in the Python programming language community for technical documentation and is similar to the Markdown format.

It is part of the [`Docutils`](https://docutils.sourceforge.io/) project of the Python Doc-SIG (Documentation Special Interest Group), aimed at creating a set of tools for Python similar to `Javadoc` for Java or `Plain Old Documentation` (pod) for Perl or [`vignette`](https://r-pkgs.org/vignettes.html) for R.

`Docutils` can extract comments and information from Python programs, and format them into various forms of program documentation.

In this sense, reStructuredText is a lightweight markup language designed to be both:

1. Processable by documentation-processing software such as `Docutils`,
2. easily readable by human programmers who are reading and writing Python source code.

*References:*

- [Wikipedia on ReStructuredText](https://en.wikipedia.org/wiki/ReStructuredText)
- [Markup languages](https://en.wikipedia.org/wiki/Comparison_of_document-markup_languages)
- [Documentation generators](https://en.wikipedia.org/wiki/Comparison_of_documentation_generators)

### Syntax

A ReST file is a plain text file with a `.rst` extension. Like Markdown, it allows you to easily write formatted text.

#### Headers

```rst
Section Header
==============

Subsection Header
-----------------
```

#### Lists

```rst
- A bullet list item
- Second item

  - A sub-item (indentation matters!)

- Spacing between items creates separate lists

- Third item

1) An enumerated list item

2) Second item

   a) Sub-item that goes on at length and thus needs
      to be wrapped. Note the indentation that must
      match the beginning of the text, not the
      enumerator.

      i) List items can even include

         paragraph breaks.

3) Third item

#) Another enumerated list item

#) Second item
```

#### Images

```rst

.. image:: /path/to/image.jpg
   :height: 100
   :width: 200
   :scale: 50
   :align: center
   :alt: ordinateur

   Caption text rendered below the image...
```

#### Named links and anonymous links

A sentence with links to Wikipedia and the Linux kernel archive.

```rst
.. Wikipedia: https://www.wikipedia.org/
.. Linux kernel archive: https://www.kernel.org/
```

Another sentence with an anonymous link to the Python website.

```rst
__ https://www.python.org/
```

::: {.callout-note}
Named links and anonymous links are enclosed in grave accents (`), and not in apostrophes (').
:::

::: {.callout-note}
It is possible to create references to labels linked to an image, a section, in the `.rst` file, etc.
:::

#### Literal blocks

```rst
::
  some literal text

This may also be used inline at the end of a paragraph, like so::
```

Some more literal text:

```rst
.. code:: python

   print("A literal block directive explicitly marked as python code")
```

## Sphinx: a documentation generator
Sphinx is an extension of [reStructuredText](https://docutils.sourceforge.io/rst.html).

The documentation of a `python` package is usually located in a `docs` or `doc` folder located at the root of a project.
For instance, in the `biketrauma` module we have considered in the courses [Creating a `python` module](../Python-modules/tp.qmd), the structure could be as follows:

```default
packaging_tutorial/
    ├── biketrauma/
    │     ├── __init__.py
    │     ├── io/
    │     ├── preprocess/
    │     └── vis/
    │     └── data/
    ├── doc/
    ├── setup.py
    ├── script.py
    └── .gitignore
```

In the Sphinx terminology, this `doc` folder is called the [source directory](http://www.sphinx-doc.org/en/stable/glossary.html#term-source-directory). It contains:

1. A configuration file `conf.py` with all the information needed to read the sources and build the doc.
By building, it is meant the process of generating the doc (usually in `html`, `pdf`, etc.) from the ReST files.
2. A directory structure containing `.md` or `.rst` files with the doc.

To help you, Sphinx comes with a script called `sphinx-quickstart` that sets up a source directory and creates a default `conf.py` with the most useful configuration values from a few questions it asks you. To use this, run:

```bash
$ sphinx-quickstart
```

Answer each question asked.
Be sure to say **yes** to the `autodoc` extension, as we will use this later.
There is also an automatic API documentation (API: Application Programming Interface) generator called `sphinx-apidoc`; see [`sphinx-apidoc`](http://www.sphinx-doc.org/en/stable/man/sphinx-apidoc.html) for details.


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: Setting up your documentation

Set up the documentation for the [`biketrauma`](https://github.com/HMMA238-2020/biketrauma) Python module.

1. Install the sphinx package with `pip`
2. Create a `doc` folder and `cd` into it
3. Launch `sphinx-quickstart --sep`.
:::

## Defining documentation structure

Let us assume you have run `sphinx-quickstart`.
It has created a source directory with `conf.py` and a master document, `index.rst` (if you accepted the default parameters).

The main function of the master document is to serve as a welcome page and to contain the root of the "table of contents tree" (or `toctree`).
This is one of the main things that Sphinx adds to reStructuredText, a way to connect multiple files to a single hierarchy of documents.

The `toctree` directive initially is empty and looks like so:

```rst
.. toctree::
   :maxdepth: 2
```

You add documents listing them in the content of the directive:

```rst
.. toctree::
   :maxdepth: 2

   usage/installation
   usage/quickstart
   ...
```

This is exactly how the `toctree` for this documentation looks.
The documents to include are given as document names, which in short means that you leave off the file name extension and use forward slashes (/) as directory separators.


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: installing a documentation

1. Update the `index.rst`: by adding an image located [here](https://images.squarespace-cdn.com/content/v1/5bfc8dbab40b9d7dd9054f41/1552517309368-BH3HUZSZCR1UF45LTS4E/cycling-injuries-revealed-info-graphic-E.jpg?format=750w) just below the title of the page
2. Install the `read_the_doc` theme following details given [here](https://sphinx-rtd-theme.readthedocs.io/en/stable/installing.html#via-python-package). Additional themes are available on [sphinx-doc themes](https://www.sphinx-doc.org/en/master/usage/theming.html).
3. Create the corresponding directory and files to add:
     - An `Installation` section with a few sentences and code snippets that explain how to install `biketrauma`
     - A `Documentation` section with subsections `io` and `visu` each one containing a title and a few lines of text.
:::

## Building the doc

During the configuration of Sphinx, a text file called `MakeFile` was created: In software development, `Make` is a build automation tool that automatically builds executable programs and libraries from source code by reading files called `Makefiles` which specify how to derive the target program.

*References:*

- [Wikipedia on Make Software](https://en.wikipedia.org/wiki/Make_(software))

```bash
$ make html
```

Then to access the web pages created:

```bash
$ firefox _build/html/index.html
```

::: {.callout-note}
There is also a [sphinx-build](http://www.sphinx-doc.org/en/stable/man/sphinx-build.html) tool that can help you to build without `make`.
:::

::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: Makefiles

1. List all the `target` defined in the `Makefiles`
2. Build your doc and visualize it with a web navigator
:::

## API doc (autodoc)

When documenting Python code, it is common to put a lot of documentation in the source files, in documentation strings.
Sphinx supports the inclusion of [`docstrings`](https://www.python.org/dev/peps/pep-0257/) from your modules with an extension (an extension is a Python module that provides additional features for Sphinx projects) called `autodoc`.

In order to use `autodoc`, you need to activate it in `conf.py` by putting the string `'sphinx.ext.autodoc'` into the list assigned to the extensions config value.
Then, you have a few additional directives at your disposal.

For example, to document the function `io.open()`, reading its signature and docstring from the source file, you’d write this:

```rst
.. autofunction:: io.open
```

You can also document whole classes or even modules automatically, using member options for the auto directives, like

```rst
.. automodule:: io
   :members:
```

`autodoc` needs to import your modules to extract the docstrings. Therefore, you must add the appropriate path to `sys.path` in your `conf.py`.


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: docstring

1. Write a docstring for the class `biketrauma.io.Load_db` and the function `plot_location`
2. Integrate this documentation in a section called `API` in the Sphinx toctree.
:::

## Sphinx-Gallery

Sphinx-Gallery is an extension able to create galleries of examples in the `html` documentation directly from the script files of your project.

*References:* [Sphinx Gallery](https://sphinx-gallery.github.io/stable/auto_examples/index.html)

### Configuration

Configuration and customization of sphinx-gallery are done primarily with a dictionary specified in your `conf.py` file.
A typical sample is:

```python
from sphinx_gallery.sorting import FileNameSortKey
sphinx_gallery_conf = {
     # path to your examples scripts
    'examples_dirs': ['../script',],
     # path where to save gallery-generated examples
    'gallery_dirs': ['_auto_scripts'],
    # Order of the Gallery
    'within_subsection_order': FileNameSortKey,
}
```

A list of the possible keys can be found on [Sphinx Galleries](https://sphinx-gallery.github.io/stable/configuration.html).


:::{.callout-important appearance='default' icon="false"}

##  EXERCISE: Sphinx gallery

1. Install the `sphinx-gallery` extension with pip.
2. Update the `conf.py` of the `biketrauma` package with the dictionary containing the configuration of the sphinx-gallery.
:::

### Structure your example files

Sphinx-Gallery parses the folder listed in the key `examples_dirs`. It expects each Python file to have two things:

1. A docstring, written in rST, that defines the header for the example. It must begin by defining a `.rST` title. The title may contain any punctuation mark but cannot start with the same punctuation mark repeated more than 3 times. For example:

   ```rst
      """
      "This" is my example-script
      ===========================

      This example doesn't do much, it just makes a simple plot
      """
   ```

2. `python` code.
This can be any valid `python` code that you wish.
Any `matplotlib` images that are generated will be saved to disk, and the '.rST' generated will display these images with the built examples.
By default, only images generated by `matplotlib`, or packages based on `matplotlib` (*e.g.,* `seaborn` or `yellowbrick`) are saved and displayed.
However, you can change this to include other packages, see for instance [Image scrapers](https://sphinx-gallery.github.io/stable/advanced.html#write-a-custom-image-scraper).


**Warning:** With default options, Sphinx-Gallery only executes the script files with a filename starting with `plot_`.

**Warning:**  Sphinx-Gallery expects to find a `README.txt` (or `README.rst`) file in every folder containing examples.

### Include examples in your toc-tree

For instance, you can add those lines in the `index.rst`

```rst
.. toctree::
   :maxdepth: 2
   :caption: Previsions:

   _auto_scripts/index
```

to add a section containing all the examples.


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: auto-build

1. Transform the `script.py` examples into an auto-build example.
:::
